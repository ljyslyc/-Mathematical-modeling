clear all;
close all;
clc
%源程序：
%输入向量:16种输入向量
P=[1 1 1,1 0 1,1 0 1,1 0 1,1 1 1;%0
   0 1 0,0 1 0,0 1 0,0 1 0,0 1 0;%1
   1 1 1,0 0 1,0 1 0,1 0 0,1 1 1;%2
   1 1 1,0 0 1,0 1 0,0 0 1,1 1 1;%3
   1 0 1,1 0 1,1 1 1,0 0 1,0 0 1;%4
   1 1 1,1 0 0,1 1 1,0 0 1,1 1 1;%5
   1 1 1,1 0 0,1 1 1,1 0 1,1 1 1;%6
   1 1 1,0 0 1,0 0 1,0 0 1,0 0 1;%7
   1 1 1,1 0 1,1 1 1,1 0 1,1 1 1;%8
   1 1 1,1 0 1,1 1 1,0 0 1,1 1 1;%9
   0 1 0,1 0 1,1 0 1,1 1 1,1 0 1;%A
   1 1 1,1 0 1,1 1 0,1 0 1,1 1 1;%B
   1 1 1,1 0 0,1 0 0,1 0 0,1 1 1;%C
   1 1 0,1 0 1,1 0 1,1 0 1,1 1 0;%D
   1 1 1,1 0 0,1 1 0,1 0 0,1 1 1;%E
   1 1 1,1 0 0,1 1 0,1 0 0,1 0 0]';%F
   
%目标向量
T=[0 0 0 0;0 0 0 1;0 0 1 0;0 0 1 1;
   0 1 0 0;0 1 0 1;0 1 1 0;0 1 1 1;
   1 0 0 0;1 0 0 1;1 0 1 0;1 0 1 1;
   1 1 0 0;1 1 0 1;1 1 1 0;1 1 1 1]';
%输入向量的最大值和最小值
threshold=[0 1;0 1;0 1;0 1;0 1;0 1;0 1;0 1;0 1;0 1;0 1;0 1;0 1;0 1;0 1];
%创建一个BP网络, []内分别为中间层和隐含层
net=newff(threshold,[13,4],{'tansig','logsig'},'trainlm');
%最大训练次数
net.trainParam.epochs=100;
%训练目标(最大误差)
net.trainParam.goal=0.0005;
%学习速率(学习系数)
LP.lr=0.01;
%训练网络
net=train(net,P,T);
%测试数据(和训练数据不一致)
P_test=[ 1 1 1,1 0 0,1 1 1,1 0 0,1 0 0;
         1 0 1,1 0 1,1 1 1,0 0 1,0 1 1]';
%对测试数据进行仿真,验证训练的网络是否完善
y=sim(net,P_test)'
